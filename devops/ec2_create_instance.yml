---
# file ec2_create_instance.yml
# $ ansible-playbook -i devops/inventories/dynamic/ec2/ec2.py  devops/ec2_create_instance.yml --ask-vault-pass

- name: create ec2
  hosts: localhost
  gather_facts: yes
  tasks:
    - include_vars: "{{ playbook_dir }}/../overrides/{{ overrides_filename | default('empty') }}{{ ('.yml' in (overrides_filename|default('empty')) ) | ternary('','.yml') }}"

    - name: create security groups
      ec2_group:
        name: "{{ec2_name}}-{{ec2_nmversion}}-security-group"
        state: "present"
        description: "{{ec2_name}}-{{ec2_nmversion}}-security-group"
        region: "{{region}}"
        rules: "{{base_security_ingress_rules}}"
        rules_egress: "{{base_security_egress_rules}}"
      register: ec2_group
    #- debug: var=ec2_group

    - name: create ec2 key-pairs
      ec2_key:
        region: "{{region}}"
        name: "{{ec2_name}}-{{ec2_nmversion}}-keypair"
        state: present
        wait: true
        key_material: "{{centos_ssh_public_key}}"
      register: ec2_keypair
    #- debug: var=ec2_keypair

    - name: create ec2 instances...
      ec2:
         key_name: "{{ec2_keypair.key.name}}"
         zone: "{{zone}}"
         region: "{{region}}"
         group_id: "{{ec2_group.group_id}}"
         instance_type: "{{instance_type}}"
         image: "{{centos_7_ami_id}}"
         wait: true
         exact_count: 1
         count_tag:
            Name: "{{ec2_name}}-{{ec2_nmversion}}-ec2"
         instance_tags:
            Name: "{{ec2_name}}-{{ec2_nmversion}}-ec2"
            Environment: "{{ec2_nmversion}}"
      register: ec2_instance
    #- debug: var=ec2_instance

    - name: pause while we wait for ssh to come up on new EC2...
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: ec2_instance.instances

    - name: create and attach elasticIP(s) to instances...
      ec2_eip:
        in_vpc: no
        reuse_existing_ip_allowed: no
        state: present
        region: "{{region}}"
        instance_id: "{{item.id}}"
      with_items: ec2_instance.instances
      register: ec2_instance_eip
    - debug: var=ec2_instance_eip

#    - name: wait for the new EC2 to full spin up by checking ec2.py return vars
#      local_action: shell "{{ inventory_dir }}"/ec2.py
#      register: ec2_output
#     - debug: msg="{{ ec2_output.stdout | from_json }}"

#    - name: waiting for the new EC2 to full spin up fulling before SSHing in
#      pause:
#        seconds: 30

#    - debug: msg="[ dyanamic inventory before ] {{ groups }}"
#    - name: dynamically add new hosts to dyanmic inventory b/c sometimes it is slow to recache
#      add_host:
#        name: "{{ item.public_ip }}"
#        groups: ec2
#      with_items: ec2_instance_eip.results
#      when: ec2_instance_eip.skipped is not defined or ec2_instance_eip.skipped == False
#    - debug: msg="[ dyanamic inventory after ] {{ groups }}"