---
# remote ec2
- name: remote build virtualenv
  hosts: ec2
  gather_facts: yes
  tasks:
    - include_vars: "{{ playbook_dir }}/../overrides/{{ overrides_filename | default('empty') }}{{ ('.yml' in (overrides_filename|default('empty')) ) | ternary('','.yml') }}"

    - name: upgrade all packages
      yum:
        name: "*"
        state: latest
      become: yes

    - name: groupinstall gcc and buildessential and other developer tools
      yum: name="@Development Tools" state=present
      become: yes

    - name: install python base deps
      yum:
        state: present
        name: python27-devel,python27-setuptools,python27-virtualenv,python27-pip
      become: yes

    - name: yum install dynamic dependencies and libs
      yum:
        state: present
        name: "{{ ','.join( yum_dependency_list ) }}"
      become: yes

    - name: make sure our working remote directory is created if the var is set
      file:
        state: directory
        dest: "{{ remote_working_dir }}"
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        mode:  0777
      when: remote_working_dir is defined

    - name: copy the handler.py
      copy:
        src: "{{ lambda_src_handler_file }}"
        dest: "{{ lambda_dst_handler_file }}"
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        mode: 0744

    - name: copy the worker.py
      copy:
        src: "{{ lambda_src_worker_file }}"
        dest: "{{ lambda_dst_worker_file }}"
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        mode: 0744
      when: lambda_src_worker_file is defined and lambda_dst_worker_file is defined

    - name: copy the lambda requirements.txt
      copy:
        src: "{{ lambda_src_requirements_file }}"
        dest: "{{ lambda_dst_requirements_file }}"
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        mode: 0644

    - name: remove the virtual environment
      file:
        state: absent
        dest: "{{ remote_venv_path }}"

    - name: create the python virtual environment
      pip:
        virtualenv_command: /usr/bin/virtualenv
        virtualenv: "{{ remote_venv_path }}"
        requirements: "{{ lambda_dst_requirements_file }}"

    - name: .bashrc should activate virtual environment when we change to that user
      lineinfile:
        dest: "/home/{{ remote_user }}/.bashrc"
        regexp: "^source {{ remote_venv_path }}/bin/activate; cd /home/{{ remote_user }};"
        insertafter: "^# User specific aliases and functions"
        line: "source {{ remote_venv_path }}/bin/activate; cd /home/{{ remote_user }};"

    - name: source it
      shell: "source /home/{{ remote_user }}/.bashrc"