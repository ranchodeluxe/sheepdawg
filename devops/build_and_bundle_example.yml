---
# $ ansible-playbook -i devops/inventories/dynamic  devops/build_and_bundle_example.yml --ask-vault-pass --private-key=./private.pem -u ec2-user

# localhost
- name: setup ansible-lambda modules
  hosts: localhost
  gather_facts: no
  roles:
    - ansible-lambda

- name: setup iam users, roles and access keys
  hosts: localhost
  gather_facts: yes
  roles:
    - iam_users

- name: create ec2 instance
  hosts: localhost
  gather_facts: yes
  roles:
    - create_box_ec2

- name: setup the AWS Lambda example
  hosts: localhost
  gather_facts: yes
  roles:
    - lambda_example_as_localhost

# remote ec2
- name: remote build
  hosts: ec2
  gather_facts: yes
  roles:
    - lambda_example_as_remote


# localhost
- name: upload our zipfile code to S3
  hosts: localhost
  gather_facts: yes
  tasks:
    # we'll need to create this role differently here
    # because Ansible by default only creates trust policies
    # for roles that are ec2-centric
    # https://github.com/ansible/ansible-modules-core/issues/2468
    # so we call out the
    - name: create IAM role
      local_action: shell aws iam create-role --role-name="{{iam_lambda_execution_roles[0].name}}" --assume-role-policy-document="file://{{role_path}}/files/policies/lambda-s3-execution-trust-policy.json"
      register: create_role_w_trust_response
      ignore_errors: yes
    - debug: msg="{{ create_role_w_trust_response }}"

    - name: create role policy LambdaExecutionRole
      iam_policy:
        iam_type: role
        iam_name: "{{ item.name }}"
        region: "{{ region }}"
        policy_name: "{{ item.name }}"
        state: present
        policy_json: "{{ lookup( 'template', 'files/policies/lambda-s3-execution-role.json.j2') }}"
      with_items: iam_lambda_execution_roles
      register: policy_output
    - debug: msg="{{ policy_output }}"

      # ansible bug: https://github.com/ansible/ansible/issues/5442
    - name: remove existing zipped file on S3
      s3:
        bucket: "{{ s3_code_bucket_name }}"
        region: "{{ region }}"
        mode: delete
        object: lambda_function.zip
      register: s3_put_output
      ignore_errors: yes

    - name: upload zipped code to S3
      s3:
        bucket: "{{ s3_code_bucket_name }}"
        region: "{{ region }}"
        mode: put
        permission: "public-read-write"
        object: lambda_function.zip
        src: "{{ playbook_dir }}/../lambda_function.zip"
      register: s3_put_output

- name: create Lambda function
  hosts: localhost
  gather_facts: no
  vars:
    state: present
    s3_event_src_bucket_name: "{{s3_bucket_names[0].name}}"
    lambda_s3_execute_role_name: "{{ iam_lambda_execution_roles[0].name }}"
    project_folder: /usr/local/src/ansible-geosheep
    deployment_package: lambda_function.zip
    account: "{{ aws_account_id }}"
    version_to_delete: 0
  tasks:
  - name: AWS Lambda Function
    lambda:
      state: "{{ state | default('present') }}"
      name: "{{ lambda_function_name }}"
      publish: True
      description: lambda function description
      code_s3_bucket: "{{ s3_code_bucket_name }}"
      code_s3_key: "{{ deployment_package }}"
      local_path: "{{ project_folder }}/{{ deployment_package }}"
      runtime: python2.7
      timeout: 5
      handler: shrink_image.handler
      memory_size: 128
      role: "arn:aws:iam::{{account}}:role/{{lambda_s3_execute_role_name}}"
      version: "{{ version_to_delete }}"
    register: lambda_create_out
  - debug: var=lambda_create_out
  - name: show results
    debug: var=lambda_facts

    # drop down to AWS CLI for this because there's no ansible lib call yet
  - name: grant S3 permissions to invoke this Lambda Function
    local_action: shell aws lambda add-permission --function-name="{{lambda_function_name}}" --region="{{region}}" --statement-id="{{lambda_s3_permission_statement}}" --action="lambda:InvokeFunction" --principal=s3.amazonaws.com --source-arn="arn:aws:s3:::{{s3_event_src_bucket_name}}" --source-account="{{account}}"
    ignore_errors: yes
    register: lambda_permission_out
#  - debug: var=lambda_permission_out

  - name: add s3 event notifications that trigger a lambda function
    lambda_s3_event:
      state: "{{ state | default('present') }}"
      bucket: "{{ s3_event_src_bucket_name }}"
      lambda_function_configurations:
        - id: "lambda-package-{{lambda_function_name}}"
          lambda_function_arn: "{{ ':'.join(lambda_facts.FunctionArn.split(':')[-1]) }}"
          events: [ 's3:ObjectCreated:*' ]
          filter:
            key:
              filter_rules:
               - name: suffix
                 value: '*.jpg'
    register: results
  - debug: var=results
